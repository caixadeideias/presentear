require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe EventsController do

  let :valid_attributes do
    Factory.attributes_for :event
  end

  describe "GET show" do
    it "assigns and find an event by token" do
      fake = double(Event)
      Event.should_receive(:find_by_token).with("joaozinho").and_return(fake)
      
      get :show, token: "joaozinho"
      
      assigns(:event).should eq(fake)
    end
  end

  describe "GET new" do
    it "assigns a new event as @event" do
      get :new
      assigns(:event).should be_a_new(Event)
    end
  end

  describe "POST create" do
      describe "with valid params" do
        it "creates a new Event" do
          expect {
            post :create, :event => valid_attributes
          }.to change(Event, :count).by(1)
        end
  
       # it "assigns a newly created event as @event" do
       #   post :create, :event => valid_attributes
       #   assigns(:event).should be_a(Event)
       #   assigns(:event).should be_persisted
       # end
       #   
       # it "redirects to the created event" do
       #   post :create, :event => valid_attributes
       #   response.should redirect_to(Event.last)
       # end
      end
  
      describe "with invalid params" do
        it "re-renders the 'new' template" do
          Event.any_instance.stub(:save).and_return(false)
          post :create, :event => {}
          response.should render_template("new")
        end
      end
    end
end
